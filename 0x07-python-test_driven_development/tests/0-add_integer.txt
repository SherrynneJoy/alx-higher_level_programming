#0-add_integer.txt

========================
Using 0-add_integer.py
=======================

This module defines a function for adding integers ``add_integer(a, b=98)``.

Usage
=====
``add_integer(...)``gives the sum of two arguments. For numbers,
the sum is equal to using the ``+`` operator.

::

	>>> add_integer = __import__('0-add_integer').add_integer

	>>> add_integer(1, 2)
	3

::

	>>> add_integer(2, -4)
	-2

It also accepts floating-point values

::

	>>> add_integer(2.0, 2.0)
	4

The floating-point values are cast into integers before addition

::

	>>> add_integer(3.2, 5.9)
	8

::

	>>> add_integer(-2.2, -0.1)
	-2

It can add floating point and integers

::

	>>> add_integer(6.5, 3)
	9

The second argument is optional since by default it has the value 98

::

	>>> add_integer(2)
	100


Arguments that are not numbers
================================

``add_integer()`` expects either integers or floats.
If either arguments is not an integer or a float, a TypeError is raised:

::

	>>> add_integer("Joy", 2)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(3, "happy")
	Traceback (most recent call last):
	TypeError: b must be an integer

::

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(5.5, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

::

	>>> add_integer(None, 2.5)
	Traceback (most recent call last):
	TypeError: a must be an integer

If both arguments are non-integers and non-floats, a TypeError is printed for the first argument

::

	>>> add_integer("Hello", "Joy")
	Traceback (most recent call last):
	TypeError: a must be an integer

If infinity is provided as an argument, the function fails.

::

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

::

	>>> add_integer(2, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

The function fails when NaN is input as an argument.

::

	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

::

	>>> add_integer(3, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float Nan to integer
